const fs = require('fs');
const axios = require('axios');
const FormData = require('form-data');
require('dotenv').config();

async function parseFile(filePath) {
  try {
    const form = new FormData();
    form.append('files', fs.createReadStream(filePath)); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'file' –Ω–∞ 'files'
    form.append('strategy', 'fast');
    form.append('output_format', 'application/json'); // –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä

    const response = await axios.post(`http://unstructured:8000/general/v0/general`, form, {
      headers: {
        ...form.getHeaders(),
        'Accept': 'application/json' // –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫
      },
      maxContentLength: Infinity,
      maxBodyLength: Infinity,
      timeout: 30000 // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Unstructured API
    const elements = response.data;

    console.log('üîç –û—Ç–≤–µ—Ç –æ—Ç Unstructured –¥–ª—è —Ñ–∞–π–ª–∞:', JSON.stringify(elements, null, 2));

    if (!Array.isArray(elements) || elements.length === 0) {
      throw new Error('Unstructured –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const text = elements
        .filter(element => element.text && element.text.trim())
        .map(element => element.text.trim())
        .join('\n\n');

    if (!text || !text.trim()) {
      throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞');
    }

    console.log('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', text.substring(0, 200) + '...');

    return text.trim();
  } catch (error) {
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞:', {
      message: error.message,
      response: error.response?.data,
      status: error.response?.status,
      filePath: filePath
    });
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–µ—Ä–µ–∑ Unstructured: ' + error.message);
  }
}

module.exports = { parseFile };