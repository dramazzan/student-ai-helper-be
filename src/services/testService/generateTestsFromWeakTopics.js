const { GoogleGenerativeAI } = require('@google/generative-ai');
const Test = require('../../models/Test');
const { analyzeStudentPerformance } = require('../analyticsService');
require('dotenv').config();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function generateTestsFromWeakTopics(userId, options = {}) {
    const {
        difficulty = 'medium',
        questionCount = 5,
        questionType = '—Ç–µ—Å—Ç —Å –≤—ã–±–æ—Ä–æ–º',
        testType = 'normal',
    } = options;

    const analysis = await analyzeStudentPerformance(userId);

    if (!analysis.weakTopics || analysis.weakTopics.length === 0) {
        throw new Error('–°–ª–∞–±—ã–µ —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    console.log("üëÄ –°–ª–∞–±—ã–µ —Ç–µ–º—ã:", analysis.weakTopics);


    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro-latest' });
    const createdTests = [];

    for (const { topic } of analysis.weakTopics) {
        const prompt = `
–°–æ—Å—Ç–∞–≤—å —Ç–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –Ω–∞ —Ç–µ–º—É "${topic}". –£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionCount}
- –¢–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionType}
- –¢–∏–ø —Ç–µ—Å—Ç–∞: ${testType}

–¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
- questions: –º–∞—Å—Å–∏–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç:
  - question: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
  - options: –º–∞—Å—Å–∏–≤ –∏–∑ 3‚Äì4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
  - correctAnswer: –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
  - topic: —Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞

‚ùó –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –±–µ–∑ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è –≤ \`\`\`.

–¢–µ–º–∞:
---
${topic}
    `;

        const result = await model.generateContent({
            contents: [{ parts: [{ text: prompt }] }],
        });

        const response = await result.response;
        const raw = response.text().trim();
        const cleaned = raw.replace(/```json/g, '').replace(/```/g, '');

        try {
            const parsed = JSON.parse(cleaned);

            parsed.questions = parsed.questions.map(q => ({
                ...q,
                topic: q.topic || topic,
            }));

            const newTest = await Test.create({
                owner: userId,
                originalFileName: topic,
                title: parsed.title || topic,
                questions: parsed.questions,
                difficulty,
                questionCount,
                sourceType: 'weak-topic',
                sourceDetails: topic,
                testType,
            });

            createdTests.push(newTest);
        } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ "${topic}":`, err.message);
        }
    }

    return createdTests;
}

module.exports = { generateTestsFromWeakTopics };
