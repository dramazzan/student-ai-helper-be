const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const Test = require('../../models/Test');
require('dotenv').config();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// üîß –°–∫–∞—á–∏–≤–∞–µ–º HTML –∏ –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ Unstructured
async function extractTextFromUrlWithUnstructured(url) {
    try {
        // 1. –°–∫–∞—á–∏–≤–∞–µ–º HTML
        const response = await axios.get(url);
        const html = response.data;

        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π .html —Ñ–∞–π–ª
        const tempPath = path.join(__dirname, 'temp-url-content.html');
        fs.writeFileSync(tempPath, html, 'utf8');

        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Unstructured
        const form = new FormData();
        form.append('files', fs.createReadStream(tempPath)); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'file' –Ω–∞ 'files'
        form.append('strategy', 'fast');
        form.append('output_format', 'application/json'); // –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä

        const parsed = await axios.post('http://unstructured:8000/general/v0/general', form, {
            headers: {
                ...form.getHeaders(),
                'Accept': 'application/json'
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
            timeout: 30000 // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç
        });

        // 4. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(tempPath);

        // 5. –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Unstructured
        const elements = parsed.data;

        console.log('üîç –û—Ç–≤–µ—Ç –æ—Ç Unstructured:', JSON.stringify(elements, null, 2));

        if (!Array.isArray(elements) || elements.length === 0) {
            throw new Error('Unstructured –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const text = elements
            .filter(element => element.text && element.text.trim())
            .map(element => element.text.trim())
            .join('\n\n');

        if (!text || !text.trim()) {
            throw new Error('Unstructured –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç');
        }

        console.log('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', text.substring(0, 200) + '...');

        return text.trim();
    } catch (err) {
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Unstructured:', {
            message: err.message,
            response: err.response?.data,
            status: err.response?.status
        });
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL —á–µ—Ä–µ–∑ Unstructured: ' + err.message);
    }
}

// üß† –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –∏–∑ URL
async function generateTestFromURL(url, userId, originalURL, options = {}) {
    const text = await extractTextFromUrlWithUnstructured(url);

    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro-latest' });

    const {
        difficulty = 'medium',
        questionCount = 5,
        questionType = '—Ç–µ—Å—Ç —Å –≤—ã–±–æ—Ä–æ–º',
        testType = 'normal',
    } = options;

    const prompt = `
–ü—Ä–æ—á–∏—Ç–∞–π —Å–ª–µ–¥—É—é—â–∏–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å–æ—Å—Ç–∞–≤—å —Ç–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. 

–°–¢–†–û–ì–û –°–û–ë–õ–Æ–î–ê–ô –°–õ–ï–î–£–Æ–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´:
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û ${questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–µ –±–æ–ª—å—à–µ, –Ω–µ –º–µ–Ω—å—à–µ)
- –¢–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionType}
- –¢–∏–ø —Ç–µ—Å—Ç–∞: ${testType}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –¢–ï–°–¢–£:
1. –°–æ–∑–¥–∞–π –¢–û–ß–ù–û ${questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤
2. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å:
   - question: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
   - options: –º–∞—Å—Å–∏–≤ –∏–∑ 3‚Äì4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
   - correctAnswer: –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
   - topic: —Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞

–°–¢–†–£–ö–¢–£–†–ê JSON:
{
  "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",
  "questions": [
    // –ú–ê–°–°–ò–í –î–û–õ–ñ–ï–ù –°–û–î–ï–†–ñ–ê–¢–¨ –†–û–í–ù–û ${questionCount} –≠–õ–ï–ú–ï–ù–¢–û–í
  ]
}

‚ùó –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –°–æ–∑–¥–∞–π –ò–ú–ï–ù–ù–û ${questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤
- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π \`\`\`json –∏–ª–∏ –¥—Ä—É–≥–∏–µ –±–ª–æ–∫–∏
- –ü—Ä–æ—Å—Ç–æ —á–∏—Å—Ç—ã–π JSON

–£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:
---
${text}
`;

    const result = await model.generateContent({
        contents: [{ parts: [{ text: prompt }] }],
    });

    const response = await result.response;
    const raw = response.text();

    console.log('üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini:', raw);

    const cleaned = raw.replace(/```json/g, '').replace(/```/g, '').trim();

    try {
        const parsed = JSON.parse(cleaned);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        if (parsed.questions.length !== questionCount) {
            console.warn(`‚ö†Ô∏è Gemini —Å–æ–∑–¥–∞–ª ${parsed.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ ${questionCount}`);

            // –û–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if (parsed.questions.length > questionCount) {
                parsed.questions = parsed.questions.slice(0, questionCount);
            } else if (parsed.questions.length < questionCount) {
                // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—å—à–µ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
                const lastQuestion = parsed.questions[parsed.questions.length - 1];
                while (parsed.questions.length < questionCount) {
                    parsed.questions.push({
                        ...lastQuestion,
                        question: `${lastQuestion.question} (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å ${parsed.questions.length + 1})`
                    });
                }
            }
        }

        parsed.questions = parsed.questions.map((q) => ({
            ...q,
            topic: q.topic || '–û–±—â–∞—è —Ç–µ–º–∞',
        }));

        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', parsed.questions.length);

        const newTest = await Test.create({
            owner: userId,
            originalFileName: originalURL,
            title: parsed.title,
            questions: parsed.questions,
            sourceType: 'url',
            sourceDetails: originalURL,
            difficulty: options.difficulty || 'medium',
            questionCount: options.questionCount || parsed.questions.length,
            testType: options.testType || 'normal',
        });

        return newTest;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err.message);
        console.error('–û—Ç–≤–µ—Ç –æ—Ç Gemini:', raw);
        throw new Error('–û—Ç–≤–µ—Ç –ò–ò –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
    }
}

module.exports = {
    generateTestFromURL,
};